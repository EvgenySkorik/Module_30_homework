from typing import List

from flask_openapi3 import APIBlueprint, Tag

from models import Client
from repository import ClientRepository, CPRepository, ParkingRepository
from shemas import (ClientIdShema, ClientShema, ClientShemaOUT, CPShema,
                    CPShemaDel, ParkingShema)

index_bp = APIBlueprint("index", __name__)
clients_bp = APIBlueprint("clients", __name__, url_prefix="/api/clients")
parkings_bp = APIBlueprint("parkings", __name__, url_prefix="/api/parkings")
cp_bp = APIBlueprint("clients_parkings", __name__, url_prefix="/api/clients_parkings")

cli_tag = Tag(name="–ö–ª–∏–µ–Ω—Ç—ã üòé", description="–†—É—á–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
park_tag = Tag(name="–ü–∞—Ä–∫–æ–≤–∫–∏ üÖøÔ∏è", description="–†—É—á–∫–∏ —Å –ø–∞–∫–æ–≤–∫–∞–º–∏")
cp_tag = Tag(name="–î–µ–π—Å—Ç–≤–∏—è üöó", description="–†—É—á–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –ø–∞—Ä–∫–æ–≤–∫–µ")


@index_bp.get("/", summary="–°—Ç–∞—Ä—Ç–æ–≤–∞—è")
def main():
    return "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ø–∞—Ä–∫–∏–Ω–≥!"


# –†—É—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞


@clients_bp.get("/", summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", tags=[cli_tag])
def get_clients() -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    clients = ClientRepository.get_all_clients_db()
    return clients


@clients_bp.post("/", summary="–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", tags=[cli_tag])
def add_client(body: ClientShema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        new_client = ClientRepository.add_client_db(body)
        return {"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç:": f"{new_client}"}, 201
    except ValueError as e:
        return {"Error": str(e)}, 409


@clients_bp.delete("/<int:client_id>", summary="–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", tags=[cli_tag])
def delete_client(path: ClientIdShema):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = ClientRepository.delete_client_db(path.client_id)
    if client_id:
        return {"–ö–ª–∏–µ–Ω—Ç —Å ID": f"{path.client_id} —É–¥–∞–ª—ë–Ω"}, 200
    else:
        return {f"–ö–ª–∏–µ–Ω—Ç c ID {path.client_id}": "–Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404


@clients_bp.get("/<int:client_id>", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID", tags=[cli_tag])
def get_client_by_id(path: ClientIdShema):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID"""
    client = ClientRepository.get_client_by_id_db(path.client_id)
    if client:
        return client, 200
    return {f"–ö–ª–∏–µ–Ω—Ç c ID {path.client_id}": "–Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404


@parkings_bp.post("/", summary="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É", tags=[park_tag])
def add_parking(body: ParkingShema):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–π –∑–æ–Ω—ã"""
    try:
        new_parking = ParkingRepository.add_parking_db(body)
        return {"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞:": f"{new_parking}"}, 201
    except ValueError as e:
        return {"Error": str(e)}, 409


@cp_bp.post("/to/", summary="–ó–∞–µ–∑–¥ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫—É", tags=[cp_tag])
def add_cl_to_park(body: CPShema):
    """–†–æ—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –≤—ä–µ–∑–¥–µ"""
    try:
        new_cp = CPRepository.client_in_to_parking_db(body)
        return {"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:": f"{new_cp}"}, 201
    except ValueError as e:
        return {"Error": str(e)}, 403


@cp_bp.put("/out/", summary="–í—ã–µ–∑–¥ —Å –ø–∞—Ä–∫–æ–≤–∫–∏", tags=[cp_tag])
def add_cl_out_park(body: CPShema):
    """–†–æ—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –≤—ã–µ–∑–¥–µ"""
    try:
        new_cp = CPRepository.client_out_of_parking_db(body)
        return {"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:": f"{new_cp[0]}", "–ü—Ä–æ–±—ã–ª": f"{new_cp[1]}"}, 201
    except ValueError as e:
        return {"Error": str(e)}, 403


@cp_bp.delete("/<int:id>", summary="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ client_parking", tags=[cp_tag])
def delete_cp(path: CPShemaDel):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ client_parking"""
    cp_id = CPRepository.delete_cp_db(path.id)
    if cp_id:
        return {"–ó–∞–ø–∏—Å—å —Å ID": f"{path.id} —É–¥–∞–ª—ë–Ω"}, 200
    else:
        return {f"–ó–∞–ø–∏—Å—å c ID {path.id}": "–Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404
